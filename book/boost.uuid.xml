<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="5.0" xml:lang="en" xml:id="boost.uuid">
  <title>Boost.Uuid</title><indexterm><primary>Boost.Uuid</primary></indexterm>
  <para><link xlink:href="http://www.boost.org/libs/uuid">Boost.Uuid</link> provides generators for <emphasis role="concept"><acronym>UUID</acronym>s</emphasis><indexterm><primary><acronym>UUID</acronym>, Boost.Uuid</primary></indexterm>. <acronym>UUID</acronym>s are universally unique identifiers that don’t depend on a central coordinating instance. There is, for example, no database storing all generated <acronym>UUID</acronym>s that can be checked to see whether a new <acronym>UUID</acronym> has been used.</para>
  <para><acronym>UUID</acronym>s are used by distributed systems that have to uniquely identify components. For example, Microsoft uses <acronym>UUID</acronym>s to identify interfaces in the <acronym>COM</acronym> world. For new interfaces developed for <acronym>COM</acronym>, unique identifiers can be easily assigned.</para>
  <para><acronym>UUID</acronym>s are 128-bit numbers. Various methods exist to generate <acronym>UUID</acronym>s. For example, a computer’s network address can be used to generate a <acronym>UUID</acronym>. The generators provided by Boost.Uuid are based on a random number generator to avoid generating <acronym>UUID</acronym>s that can be traced back to the computer generating them.</para>
  <para>All classes and functions from Boost.Uuid are defined in the namespace <package>boost::uuids</package>. There is no master header file to get access to all of them.</para>
  <example xml:id="ex.uuid_01">
    <title>Generating random <acronym>UUID</acronym>s with <classname>boost::uuids::random_generator</classname></title>
    <programlisting><xi:include href="../src/uuid_01/main.cpp" parse="text"/></programlisting>
  </example>
  <para><xref linkend="ex.uuid_01" xrefstyle="enp" /> generates a random <acronym>UUID</acronym>. It uses the class <classname>boost::uuids::random_generator</classname><indexterm><primary>uuids::random_generator</primary></indexterm><indexterm><primary>random_generator, uuids</primary></indexterm>, which is defined in <filename class="headerfile">boost/uuid/uuid_generators.hpp</filename>. This header file provides access to all generators provided by Boost.Uuid.</para>
  <para><classname>boost::uuids::random_generator</classname> is used like the generators from the C++11 standard library or from Boost.Random. This class overloads <methodname role="operator">operator()</methodname> to generate random <acronym>UUID</acronym>s.</para>
  <para>The type of a <acronym>UUID</acronym> is <classname>boost::uuids::uuid</classname><indexterm><primary>uuids::uuid</primary></indexterm><indexterm><primary>uuid, uuids</primary></indexterm>. <classname>boost::uuids::uuid</classname> is a <emphasis role="concept">POD</emphasis> &#x2013; plain old data. You can’t create objects of type <classname>boost::uuids::uuid</classname> without a generator. But then, it’s a lean type that allocates exactly 128 bits. The class is defined in <filename class="headerfile">boost/uuid/uuid.hpp</filename>.</para>
  <para>An object of type <classname>boost::uuids::uuid</classname> can be written to the standard output stream. However, you must include <filename class="headerfile">boost/uuid/uuid_io.hpp</filename>. This header file provides the overloaded operator to write objects of type <classname>boost::uuids::uuid</classname> to an output stream.</para>
  <para><xref linkend="ex.uuid_01" xrefstyle="enp" /> displays output that looks like the following: <computeroutput>0cb6f61f-be68-5afc-8686-c52e3fc7a50d</computeroutput>. Using dashes is the preferred way of displaying <acronym>UUID</acronym>s.</para>
  <example xml:id="ex.uuid_02">
    <title>Member functions of <classname>boost::uuids::uuid</classname></title>
    <programlisting><xi:include href="../src/uuid_02/main.cpp" parse="text"/></programlisting>
  </example>
  <para><classname>boost::uuids::uuid</classname> provides only a few member functions, some of which are introduced in <xref linkend="ex.uuid_02" xrefstyle="enp"/>. <methodname>size</methodname><indexterm><primary>uuids::uuid::size</primary></indexterm><indexterm><primary>size, uuids::uuid</primary></indexterm> returns the size of a <acronym>UUID</acronym> in bytes. Because a <acronym>UUID</acronym> is always 128 bits, <methodname>size</methodname> always returns 16. <methodname>is_nil</methodname><indexterm><primary>uuids::uuid::is_nil</primary></indexterm><indexterm><primary>is_nil, uuids::uuid</primary></indexterm> returns <literal>true</literal> if the <acronym>UUID</acronym> is a nil <acronym>UUID</acronym>. The nil <acronym>UUID</acronym> is 00000000-0000-0000-0000-000000000000. <methodname>variant</methodname><indexterm><primary>uuids::uuid::variant</primary></indexterm><indexterm><primary>variant, uuids::uuid</primary></indexterm> and <methodname>version</methodname><indexterm><primary>uuids::uuid::version</primary></indexterm><indexterm><primary>version, uuids::uuid</primary></indexterm> specify the kind of <acronym>UUID</acronym> and how it was generated. In <xref linkend="ex.uuid_02" xrefstyle="enp" />, <methodname>variant</methodname> returns 1, which means the <acronym>UUID</acronym> conforms to RFC 4122. <methodname>version</methodname> returns 4, which means that the <acronym>UUID</acronym> was created by a random number generator.</para>
  <para><classname>boost::uuids::uuid</classname> also provides member functions like <methodname>begin</methodname><indexterm><primary>uuids::uuid::begin</primary></indexterm><indexterm><primary>begin, uuids::uuid</primary></indexterm>, <methodname>end</methodname><indexterm><primary>uuids::uuid::end</primary></indexterm><indexterm><primary>end, uuids::uuid</primary></indexterm>, and <methodname>swap</methodname><indexterm><primary>uuids::uuid::swap</primary></indexterm><indexterm><primary>swap, uuids::uuid</primary></indexterm> .</para>
  <example xml:id="ex.uuid_03">
    <title>Generators from Boost.Uuid</title>
    <programlisting><xi:include href="../src/uuid_03/main.cpp" parse="text"/></programlisting>
  </example>
  <para><xref linkend="ex.uuid_03" xrefstyle="enp" /> contains more generators from Boost.Uuid. <classname>nil_generator</classname><indexterm><primary>uuids::nil_generator</primary></indexterm><indexterm><primary>nil_generator, uuids</primary></indexterm> generates a nil <acronym>UUID</acronym>. <methodname>is_nil</methodname> returns <literal>true</literal> only if the <acronym>UUID</acronym> is nil.</para>
  <para>You use <classname>string_generator</classname><indexterm><primary>uuids::string_generator</primary></indexterm><indexterm><primary>string_generator, uuids</primary></indexterm> if you want to use an existing <acronym>UUID</acronym>. You can generate <acronym>UUID</acronym>s at sites such as <link xlink:href="http://www.uuidgenerator.net/" />. For the <acronym>UUID</acronym> in <xref linkend="ex.uuid_03" xrefstyle="enp"/>, <methodname>variant</methodname> returns 0, which means that the <acronym>UUID</acronym> conforms to the backwards compatible NCS standard. <classname>name_generator</classname> is used to generate <acronym>UUID</acronym>s in namespaces.</para>
  <para>Please note the spelling of <acronym>UUID</acronym>s when using <classname>string_generator</classname>. You can pass a <acronym>UUID</acronym> without dashes, but if you use dashes, they must be in the right places. Case (upper or lower) is ignored.</para>
  <example xml:id="ex.uuid_04">
    <title>Conversion to strings</title>
    <programlisting><xi:include href="../src/uuid_04/main.cpp" parse="text"/></programlisting>
  </example>
  <para>Boost.Uuid provides the functions <function>boost::uuids::to_string</function><indexterm><primary>uuids::to_string</primary></indexterm><indexterm><primary>to_string, uuids</primary></indexterm> and <function>boost::uuids::to_wstring</function><indexterm><primary>uuids::to_wstring</primary></indexterm><indexterm><primary>to_wstring, uuids</primary></indexterm> to convert a <acronym>UUID</acronym> to a string (see <xref linkend="ex.uuid_04" xrefstyle="enp"/>). It is also possible to use <function>boost::lexical_cast</function> for the conversion.</para>
</chapter>
