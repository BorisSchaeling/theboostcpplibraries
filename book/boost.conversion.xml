<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="5.0" xml:lang="en" xml:id="boost.conversion">
  <title>Boost.Conversion</title><indexterm><primary>Boost.Conversion</primary></indexterm>
  <para><link xlink:href="http://www.boost.org/libs/conversion/cast.htm">Boost.Conversion</link> defines the cast operators <code>boost::polymorphic_cast</code><indexterm><primary>polymorphic_cast, Boost.Conversion</primary></indexterm> and <code>boost::polymorphic_downcast</code><indexterm><primary>polymorphic_downcast, Boost.Conversion</primary></indexterm> in the header file <filename class="headerfile">boost/cast.hpp</filename>. They are designed to handle type casts &#x2013; usually done with <code>dynamic_cast</code> &#x2013; more precisely.</para>
  <example xml:id="ex.conversion_01">
    <title>Down and cross casts with <code>dynamic_cast</code></title>
    <programlisting><xi:include href="../src/conversion_01/main.cpp" parse="text"/></programlisting>
  </example>
  <para><xref linkend="ex.conversion_01" xrefstyle="enp"/> uses the cast operator <code>dynamic_cast</code> twice: In <function>downcast</function>, it transforms a pointer pointing to a base class to one pointing to a derived class. In <function>crosscast</function>, it transforms a pointer pointing to a base class to one pointing to a different base class. The first transformation is a <emphasis role="concept">downcast</emphasis>, and the second is a <emphasis role="concept">cross cast</emphasis>. The cast operators from Boost.Conversion let you distinguish a downcast from a cross cast.</para>
  <example xml:id="ex.conversion_02">
    <title>Down and cross casts with <code>polymorphic_downcast</code> and <code>polymorphic_cast</code></title>
    <programlisting><xi:include href="../src/conversion_02/main.cpp" parse="text"/></programlisting>
  </example>
  <para><code>boost::polymorphic_downcast</code> (see <xref linkend="ex.conversion_02" xrefstyle="enp"/>) can only be used for downcasts because it uses <code>static_cast</code> to perform the cast. Because <code>static_cast</code> does not dynamically check the cast for validity, <code>boost::polymorphic_downcast</code> must only be used if the cast is safe. In debug builds, <code>boost::polymorphic_downcast</code> uses <code>dynamic_cast</code> and <function>assert</function> to make sure the type cast is valid. This test is only performed if the macro <code>NDEBUG</code> is not defined, which is usually the case for debug builds.</para>
  <para><code>boost::polymorphic_cast</code> is required for cross casts. <code>boost::polymorphic_cast</code> uses <code>dynamic_cast</code>, which is the only cast operator that can perform a cross cast. It is better to use <code>boost::polymorphic_cast</code> instead of <code>dynamic_cast</code> because the former throws an exception of type <exceptionname>std::bad_cast</exceptionname> in case of an error, while <code>dynamic_cast</code> returns a null pointer if the type cast fails.</para>
  <para>Use <code>boost::polymorphic_downcast</code> and <code>boost::polymorphic_cast</code> only to convert pointers; otherwise, use <code>dynamic_cast</code>. Because <code>boost::polymorphic_downcast</code> is based on <code>static_cast</code>, it cannot convert objects of a base class to objects of a derived class. Also, it does not make sense to use <code>boost::polymorphic_cast</code> to convert types other than pointers because <code>dynamic_cast</code> will throw an exception of type <exceptionname>std::bad_cast</exceptionname> if a cast fails.</para>
</chapter>
