<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="5.0" xml:lang="en" xml:id="boost.assign">
  <title>Boost.Assign</title><indexterm><primary>Boost.Assign</primary></indexterm>
  <para>The library <link xlink:href="http://www.boost.org/libs/assign">Boost.Assign</link> provides helper functions to initialize containers or add elements to containers. These functions are especially helpful if many elements need to be stored in a container. Thanks to the functions offered by Boost.Assign, you don’t need to call a member function like <methodname>push_back</methodname> repeatedly to insert elements one by one into a container.</para>
  <para>If you work with a development environment that supports C++11, you can benefit from initializer lists. Usually you can pass any number of values to the constructor to initialize containers. Thanks to initializer lists, you don’t have to depend on Boost.Assign with C++11. However, Boost.Assign provides helper functions to add multiple values to an existing container. These helper functions can be useful in C++11 development environments.</para>
  <para><xref linkend="ex.assign_01" xrefstyle="enp"/> introduces a few functions that containers can be initialized with. To use the functions defined by Boost.Assign, include the header file <filename class="headerfile" >boost/assign.hpp</filename>.</para>
  <example xml:id="ex.assign_01">
    <title>Initializing containers</title>
    <programlisting><xi:include href="../src/assign_01/main.cpp" parse="text"/></programlisting>
  </example>
  <para>Boost.Assign provides three functions to initialize containers. The most important, and the one you usually work with, is <function>boost::assign::list_of</function><indexterm><primary>assign::list_of</primary></indexterm><indexterm><primary>list_of, assign</primary></indexterm>. You use <function>boost::assign::map_list_of</function><indexterm><primary>assign::map_list_of</primary></indexterm><indexterm><primary>map_list_of, assign</primary></indexterm> with <classname>std::map</classname> and <function>boost::assign::tuple_list_of</function><indexterm><primary>assign::tuple_list_of</primary></indexterm><indexterm><primary>tuple_list_of, assign</primary></indexterm> to initialize tuples in a container.</para>
  <para>You don’t have to use <function>boost::assign::map_list_of</function> or <function>boost::assign::tuple_list_of</function>. You can initialize any container with <function>boost::assign::list_of</function>. However, if you use <classname>std::map</classname> or a container with tuples, you must pass a template parameter to <function>boost::assign::list_of</function> that tells the function how elements are stored in the container. This template parameter is not required for <function>boost::assign::map_list_of</function> and <function>boost::assign::tuple_list_of</function>.</para>
  <para>All three functions return a proxy object. This object overloads the operator <methodname role="operator">operator()</methodname>. You can call this operator multiple times to save values in the container. Even though you access another object, and not the container, the container is changed through this proxy object.</para>
  <para>If you want to initialize adapters like <classname>std::stack</classname>, call the member function <methodname>to_adapter</methodname><indexterm><primary>to_adapter, Boost.Assign</primary></indexterm> on the proxy. The proxy then calls the member function <methodname>push</methodname>, which is provided by all adapters.</para>
  <para><function>boost::assign::tuple_list_of</function> supports tuples of type <classname>boost::tuple</classname> only. You cannot use this function to initialize containers with tuples from the standard library.</para>
  <para><xref linkend="ex.assign_02" xrefstyle="enp"/> illustrates how values can be added to existing containers.</para>
  <example xml:id="ex.assign_02">
    <title>Adding values to containers</title>
    <programlisting><xi:include href="../src/assign_02/main.cpp" parse="text"/></programlisting>
  </example>
  <para>The <function>boost::assign::push_back</function><indexterm><primary>assign::push_back</primary></indexterm><indexterm><primary>push_back, assign</primary></indexterm>, <function>boost::assign::push_front</function><indexterm><primary>assign::push_front</primary></indexterm><indexterm><primary>push_front, assign</primary></indexterm>, <function>boost::assign::insert</function><indexterm><primary>assign::insert</primary></indexterm><indexterm><primary>insert, assign</primary></indexterm>, and <function>boost::assign::push</function><indexterm><primary>assign::push</primary></indexterm><indexterm><primary>push, assign</primary></indexterm> functions of Boost.Assign return a proxy. You pass these functions the container you want to add new elements to. Then, you call the operator <methodname role="operator">operator()</methodname> on the proxy and pass the values you want to store in the container.</para>
  <para>The four functions <function>boost::assign::push_back</function>, <function>boost::assign::push_front</function>, <function>boost::assign::insert</function>, and <function>boost::assign::push</function> are called in this manner because the proxies returned call the identically named member functions on the container. <xref linkend="ex.assign_02" xrefstyle="enp"/> adds the three numbers 1, 2, and 3 to the vector <varname>v</varname> with three calls to <methodname>push_back</methodname>.</para>
  <para>Boost.Assign provides additional helper functions you can use to add values to a container, including <function>boost::assign::add_edge</function><indexterm><primary>assign::add_edge</primary></indexterm><indexterm><primary>add_edge, assign</primary></indexterm>, which you can use to get a proxy for a graph from Boost.Graph.</para>
  <simplesect role="exercises" xml:id="boost.assign-exercises">
    <title>Exercise</title>
    <para>Improve this program with Boost.Assign:</para>
    <informalexample>
      <programlisting><xi:include href="../exercises/assign_01/main.cpp" parse="text"/></programlisting>
    </informalexample>
  </simplesect>
</chapter>
