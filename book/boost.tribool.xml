<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="5.0" xml:lang="en" xml:id="boost.tribool">
  <title>Boost.Tribool</title><indexterm><primary>Boost.Tribool</primary></indexterm>
  <para>The library <link xlink:href="http://boost.org/libs/logic">Boost.Tribool</link> provides the class <classname>boost::logic::tribool</classname><indexterm><primary>logic::tribool</primary></indexterm><indexterm><primary>tribool, logic</primary></indexterm>, which is similar to <type>bool</type>. However, while <type>bool</type> can distinguish two states, <classname>boost::logic::tribool</classname> handles three.</para>
  <para>To use <classname>boost::logic::tribool</classname>, include the header file <filename class="headerfile">boost/logic/tribool.hpp</filename>.</para>
  <example xml:id="ex.tribool_01">
    <title>Three states of <classname>boost::logic::tribool</classname></title>
    <programlisting><xi:include href="../src/tribool_01/main.cpp" parse="text"/></programlisting>
  </example>
  <para>A variable of type <classname>boost::logic::tribool</classname> can be set to <literal>true</literal>, <literal>false</literal>, or <literal>indeterminate</literal><indexterm><primary>indeterminate, Boost.Tribool</primary></indexterm>. The default constructor initializes the variable to <literal>false</literal>. That’s why <xref linkend="ex.tribool_01" xrefstyle="enp"/> writes <computeroutput>false</computeroutput> first.</para>
  <para>The <code>if</code> statement in <xref linkend="ex.tribool_01" xrefstyle="enp"/> illustrates how to evaluate <varname>b</varname> correctly. You have to check for <literal>true</literal> and <literal>false</literal> explicitly. If the variable is set to <literal>indeterminate</literal>, as in the example, the <code>else</code> block will be executed.</para>
  <para>Boost.Tribool also provides the function <function>boost::logic::indeterminate</function><indexterm><primary>logic::indeterminate</primary></indexterm><indexterm><primary>indeterminate, logic</primary></indexterm>. If you pass a variable of type <classname>boost::logic::tribool</classname> that is set to <literal>indeterminate</literal>, this function will return <literal>true</literal>. If the variable is set to <literal>true</literal> or <literal>false</literal>, it will return <literal>false</literal>.</para>
  <example xml:id="ex.tribool_02">
    <title>Logical operators with <classname>boost::logic::tribool</classname></title>
    <programlisting><xi:include href="../src/tribool_02/main.cpp" parse="text"/></programlisting>
  </example>
  <para>You can use logical operators with variables of type <classname>boost::logic::tribool</classname>, just as you can with variables of type <type>bool</type>. In fact, this is the only way to process variables of type <classname>boost::logic::tribool</classname> because the class doesn’t provide any member functions.</para>
  <para><xref linkend="ex.tribool_02" xrefstyle="enp"/> returns <literal>true</literal> for <code>b1 || indeterminate</code>, <literal>false</literal> for <code>b2 &amp;&amp; indeterminate</code>, and <code>indeterminate</code> in all other cases. If you look at the operations and their results, you will notice that <classname>boost::logic::tribool</classname> behaves as one would expect intuitively. The documentation on Boost.Tribool also contains tables that show which operations lead to which results.</para>
  <para><xref linkend="ex.tribool_02" xrefstyle="enp"/> also illustrates how the values <computeroutput>true</computeroutput>, <computeroutput>false</computeroutput>, and <computeroutput>indeterminate</computeroutput> are written to standard output with variables of type <classname>boost::logic::tribool</classname>. The header file <filename class="headerfile">boost/logic/tribool_io.hpp</filename> must be included and the flag <varname>std::ios::boolalpha</varname> must be set for standard output.</para>
  <para>Boost.Tribool also provides the macro <code>BOOST_TRIBOOL_THIRD_STATE</code><indexterm><primary>BOOST_TRIBOOL_THIRD_STATE, Boost.Tribool</primary></indexterm>, which lets you substitute another value for <literal>indeterminate</literal>. For example, you could use <literal>dontknow</literal> instead of <literal>indeterminate</literal>.</para>
</chapter>
