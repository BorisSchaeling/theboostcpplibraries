<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="5.0" xml:lang="en" xml:id="boost.random">
  <title>Boost.Random</title><indexterm><primary>Boost.Random</primary></indexterm>
  <para>The library <link xlink:href="http://www.boost.org/libs/random">Boost.Random</link> provides numerous random number generators that allow you to decide how random numbers should be generated. It was always possible in C++ to generate random numbers with <function>std::rand</function> from <filename class="headerfile">cstdlib</filename>. However, with <function>std::rand</function> the way random numbers are generated depends on how the standard library was implemented.</para>
  <para>You can use all of the random number generators and other classes and functions from Boost.Random when you include the header file <filename class="headerfile">boost/random.hpp</filename>.</para>
  <para>Large parts of this library were added to the standard library with C++11. If your development environment supports C++11, you can rewrite the Boost.Random examples in this chapter by including the header file <filename class="headerfile">random</filename> and accessing the namespace <package>std</package>.</para>
  <example xml:id="ex.random_01">
    <title>Pseudo-random numbers with <classname>boost::random::mt19937</classname></title>
    <programlisting><xi:include href="../src/random_01/main.cpp" parse="text"/></programlisting>
  </example>
  <para><xref linkend="ex.random_01" xrefstyle="enp" /> accesses the random number generator <classname>boost::random::mt19937</classname><indexterm><primary>random::mt19937</primary></indexterm><indexterm><primary>mt19937, random</primary></indexterm>. The operator <methodname role="operator">operator()</methodname> generates a random number, which is written to standard output.</para>
  <para>The random numbers generated by <classname>boost::random::mt19937</classname> are integers. Whether integers or floating point numbers are generated depends on the particular generator you use. All random number generators define the type <classname>result_type</classname> to determine the type of the random numbers. The <classname>result_type</classname><indexterm><primary>random::mt19937::result_type</primary></indexterm><indexterm><primary>result_type, random::mt19937</primary></indexterm> for <classname>boost::random::mt19937</classname> is <type>boost::uint32_t</type>.</para>
  <para>All random number generators provide two member functions: <methodname>min</methodname><indexterm><primary>random::mt19937::min</primary></indexterm><indexterm><primary>min, random::mt19937</primary></indexterm> and <methodname>max</methodname><indexterm><primary>random::mt19937::max</primary></indexterm><indexterm><primary>max, random::mt19937</primary></indexterm>. These functions return the smallest and largest number that can be generated by that random number generator.</para>
  <para>Nearly all of the random number generators provided by Boost.Random are <emphasis role="concept">pseudo-random number generators</emphasis><indexterm><primary>pseudo-random number generator, Boost.Random</primary></indexterm>. Pseudo-random number generators don’t generate real random numbers. They are based on algorithms that generate seemingly random numbers. <classname>boost::random::mt19937</classname> is one of these pseudo-random number generators.</para>
  <para>Pseudo-random number generators typically have to be initialized. If they are initialized with the same values, they return the same random numbers. That’s why in <xref linkend="ex.random_01" xrefstyle="enp" /> the return value of <function>std::time</function> is passed to the constructor of <classname>boost::random::mt19937</classname>. This should ensure that when the program is run at different times, different random numbers will be generated.</para>
  <para>Pseudo-random numbers are good enough for most use cases. <function>std::rand</function> is also based on a pseudo-random number generator, which must be initialized with <function>std::srand</function>. However, Boost.Random provides a random number generator that can generate real random numbers, as long as the operating system has a source to generate real random numbers.</para>
  <example xml:id="ex.random_02">
    <title>Real random numbers with <classname>boost::random::random_device</classname></title>
    <programlisting><xi:include href="../src/random_02/main.cpp" parse="text"/></programlisting>
  </example>
  <para><classname>boost::random::random_device</classname><indexterm><primary>random::random_device</primary></indexterm><indexterm><primary>random_device, random</primary></indexterm> is a <emphasis role="concept">non-deterministic random number generator</emphasis><indexterm><primary>non-deterministic random number generator, Boost.Random</primary></indexterm>, which is a random number generator that can generate real random numbers. There is no algorithm that needs to be initialized. Thus, predicting the random numbers is impossible. Non-deterministic random number generators are often used in security-related applications.</para>
  <para><classname>boost::random::random_device</classname> calls operating system functions to generate random numbers. If, as in <xref linkend="ex.random_02" xrefstyle="enp" />, the default constructor is called, <classname>boost::random::random_device</classname> uses the cryptographic service provider MS_DEF_PROV on Windows and <filename role="devicefile">/dev/urandom</filename> on Linux as a source.</para>
  <para>If you want to use another source, call the constructor of <classname>boost::random::random_device</classname>, which expects a parameter of type <classname>std::string</classname>. How this parameter is interpreted depends on the operating system. On Windows, it must be the name of a cryptographic service provider, on Linux a path to a device.</para>
  <para>Please note that <filename class="headerfile">boost/random/random_device.hpp</filename> must be included if you want to use the class <classname>boost::random::random_device</classname>. This class is not made available by <filename class="headerfile">boost/random.hpp</filename>.</para>
  <example xml:id="ex.random_03">
    <title>The random numbers 0 and 1 with <classname>bernoulli_distribution</classname></title>
    <programlisting><xi:include href="../src/random_03/main.cpp" parse="text"/></programlisting>
  </example>
  <para><xref linkend="ex.random_03" xrefstyle="enp" /> uses the pseudo-random number generator <classname>boost::random::mt19937</classname>. In addition, a <emphasis role="concept">distribution</emphasis><indexterm><primary>distribution, Boost.Random</primary></indexterm> is used. Distributions are Boost.Random classes that map the range of random numbers from a random number generator to another range. While random number generators like <classname>boost::random::mt19937</classname> have a built-in lower and upper limit for random numbers that can be seen using <methodname>min</methodname> and <methodname>max</methodname>, you may need random numbers in a different range.</para>
  <para><xref linkend="ex.random_03" xrefstyle="enp" /> simulates throwing a coin. Because a coin has only two sides, the random number generator should return 0 or 1. <classname>boost::random::bernoulli_distribution</classname><indexterm><primary>random::bernoulli_distribution</primary></indexterm><indexterm><primary>bernoulli_distribution, random</primary></indexterm> is a distribution that returns one of two possible results.</para>
  <para>Distributions are used like random number generators: you call the operator <methodname role="operator">operator()</methodname> to receive a random number. However, you must pass a random number generator as a parameter to a distribution. In <xref linkend="ex.random_03" xrefstyle="enp" />, <varname>dist</varname> uses the random number generator <varname>gen</varname> to return either 0 or 1.</para>
  <example xml:id="ex.random_04">
    <title>Random numbers between 1 and 100 with <classname>uniform_int_distribution</classname></title>
    <programlisting><xi:include href="../src/random_04/main.cpp" parse="text"/></programlisting>
  </example>
  <para>Boost.Random provides numerous distributions. <xref linkend="ex.random_04" xrefstyle="enp" /> uses a distribution that is often needed: <classname>boost::random::uniform_int_distribution</classname><indexterm><primary>random::uniform_int_distribution</primary></indexterm><indexterm><primary>uniform_int_distribution, random</primary></indexterm>. This distribution lets you define the range of random numbers you need. In <xref linkend="ex.random_04" xrefstyle="enp" />, <varname>dist</varname> returns a number between 1 and 100.</para>
  <para>Please note that the values 1 and 100 can be returned by <varname>dist</varname>. The lower and upper limits of distributions are inclusive.</para>
  <para>There are many distributions in Boost.Random besides <classname>boost::random::bernoulli_distribution</classname> and <classname>boost::random::uniform_int_distribution</classname>. For example, there are distributions like <classname>boost::random::normal_distribution</classname><indexterm><primary>random::normal_distribution</primary></indexterm><indexterm><primary>normal_distribution, random</primary></indexterm> and <classname>boost::random::chi_squared_distribution</classname><indexterm><primary>random::chi_squared_distribution</primary></indexterm><indexterm><primary>chi_squared_distribution, random</primary></indexterm>, which are used in statistics.</para>
</chapter>
