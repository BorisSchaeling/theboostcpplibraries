<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="5.0" xml:lang="en" xml:id="boost.optional">
  <title>Boost.Optional</title><indexterm><primary>Boost.Optional</primary></indexterm>
  <para>The library <link xlink:href="http://www.boost.org/libs/optional">Boost.Optional</link> provides the class <classname>boost::optional</classname>,<indexterm><primary>optional, Boost.Optional</primary></indexterm> which can be used for optional return values. These are return values from functions that may not always return a result. <xref linkend="ex.optional_01" xrefstyle="enp"/> illustrates how optional return values are usually implemented without Boost.Optional.</para>
  <example xml:id="ex.optional_01">
    <title>Special values to denote optional return values</title>
    <programlisting><xi:include href="../src/optional_01/main.cpp" parse="text"/></programlisting>
  </example>
  <para><xref linkend="ex.optional_01" xrefstyle="enp"/> uses the function <function>get_even_random_number</function>, which should return an even random number. It does this in a rather naive fashion by calling the function <function>std::rand</function> from the standard library. If <function>std::rand</function> generates an even random number, that number is returned by <function>get_even_random_number</function>. If the generated random number is odd, -1 is returned.</para>
  <para>In this example, -1 means that no even random number could be generated. Thus, <function>get_even_random_number</function> can’t guarantee that an even random number is returned. The return value is optional.</para>
  <para>Many functions use special values like -1 to denote that no result can be returned. For example, the member function <methodname>find</methodname> of the class <classname>std::string</classname> returns the special value <varname>std::string::npos</varname> if a substring can’t be found. Functions whose return value is a pointer often return 0 to indicate that no result exists.</para>
  <para>Boost.Optional provides <classname>boost::optional</classname>, which makes it possible to clearly mark optional return values.</para>
  <example xml:id="ex.optional_02">
    <title>Optional return values with <classname>boost::optional</classname></title>
    <programlisting><xi:include href="../src/optional_02/main.cpp" parse="text"/></programlisting>
  </example>
  <para>In <xref linkend="ex.optional_02" xrefstyle="enp"/> the return value of <function>get_even_random_number</function> has a new type, <type>boost::optional&lt;int&gt;</type>. <classname>boost::optional</classname> is a template that must be instantiated with the actual type of the return value. <filename class="headerfile">boost/optional.hpp</filename> must be included for <classname>boost::optional</classname>.</para>
  <para>If <function>get_even_random_number</function> generates an even random number, the value is returned directly, automatically wrapped in an object of type <type>boost::optional&lt;int&gt;</type>, because <classname>boost::optional</classname> provides a non-exclusive constructor. If <function>get_even_random_number</function> does not generate an even random number, an empty object of type <type>boost::optional&lt;int&gt;</type> is returned. The return value is created with a call to the default constructor.</para>
  <para><function>main</function> checks whether <varname>i</varname> is empty. If it isn’t empty, the number stored in <varname>i</varname> is accessed with <methodname role="operator">operator*</methodname>. <classname>boost::optional</classname> appears to work like a pointer. However, you should not think of <classname>boost::optional</classname> as a pointer because, for example, values in <classname>boost::optional</classname> are copied by the copy constructor while a pointer does not copy the value it points to.</para>
  <example xml:id="ex.optional_03">
    <title>Other useful member functions of <classname>boost::optional</classname></title>
    <programlisting><xi:include href="../src/optional_03/main.cpp" parse="text"/></programlisting>
  </example>
  <para><xref linkend="ex.optional_03" xrefstyle="enp" /> introduces other useful member functions of <classname>boost::optional</classname>. This class provides a special constructor that takes a condition as the first parameter. If the condition is true, an object of type <classname>boost::optional</classname> is initialized with the second parameter. If the condition is false, an empty object of type <classname>boost::optional</classname> is created. <xref linkend="ex.optional_03" xrefstyle="enp" /> uses this constructor in the function <function>get_even_random_number</function>.</para>
  <para>With <methodname>is_initialized</methodname><indexterm><primary>optional::is_initialized</primary></indexterm><indexterm><primary>is_initialized, optional</primary></indexterm> you can check whether an object of type <classname>boost::optional</classname> is not empty. Boost.Optional speaks about initialized and uninitialized objects &#x2013; hence, the name of the member function <methodname>is_initialized</methodname>. The member function <methodname>get</methodname><indexterm><primary>optional::get</primary></indexterm><indexterm><primary>get, optional</primary></indexterm> is equivalent to <methodname role="operator">operator*</methodname>.</para>
  <example xml:id="ex.optional_04">
    <title>Various helper functions of Boost.Optional</title>
    <programlisting><xi:include href="../src/optional_04/main.cpp" parse="text"/></programlisting>
  </example>
  <para>Boost.Optional provides free-standing helper functions such as <function>boost::make_optional</function><indexterm><primary>make_optional, Boost.Optional</primary></indexterm> and <function>boost::get_optional_value_or</function><indexterm><primary>get_optional_value_or, Boost.Optional</primary></indexterm> (see <xref linkend="ex.optional_04" xrefstyle="enp"/>). <function>boost::make_optional</function> can be called to create an object of type <classname>boost::optional</classname>. If you want a default value to be returned when <classname>boost::optional</classname> is empty, you can call <function>boost::get_optional_value_or</function>.</para>
  <para>The function <function>boost::get_optional_value_or</function> is also provided as a member function of <classname>boost::optional</classname>. It is called <methodname>get_value_or</methodname><indexterm><primary>optional::get_value_or</primary></indexterm><indexterm><primary>get_value_or, optional</primary></indexterm>.</para>
  <para>Along with <filename class="headerfile">boost/optional/optional_io.hpp</filename>, Boost.Optional provides a header file with overloaded stream operators, which let you write objects of type <classname>boost::optional</classname> to, for example, standard output.</para>
</chapter>
