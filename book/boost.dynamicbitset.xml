<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="5.0" xml:lang="en" xml:id="boost.dynamicbitset">
  <title>Boost.DynamicBitset</title><indexterm><primary>Boost.DynamicBitset</primary></indexterm>
  <para>The library <link xlink:href="http://www.boost.org/libs/dynamic_bitset">Boost.DynamicBitset</link> provides the class <classname>boost::dynamic_bitset</classname><indexterm><primary>dynamic_bitset, Boost.DynamicBitset</primary></indexterm>, which is used like <classname>std::bitset</classname>. The difference is that the number of bits for <classname>std::bitset</classname> must be specified at compile time, whereas the number of bits for <classname>boost::dynamic_bitset</classname> is specified at run time.</para>
  <para>To use <classname>boost::dynamic_bitset</classname>, include the header file <filename class="headerfile">boost/dynamic_bitset.hpp</filename>.</para>
  <example xml:id="ex.dynamicbitset_01">
    <title>Using <classname>boost::dynamic_bitset</classname></title>
    <programlisting><xi:include href="../src/dynamicbitset_01/main.cpp" parse="text"/></programlisting>
  </example>
  <para><classname>boost::dynamic_bitset</classname> is a template that requires no template parameters when instantiated; default types are used in that case. More important are the parameters passed to the constructor. In <xref linkend="ex.dynamicbitset_01" xrefstyle="enp" />, the constructor creates <varname>db</varname> with 3 bits. The second parameter initializes the bits; in this case, the number 4 initializes the most significant bit &#x2013; the bit on the very left.</para>
  <para>The number of bits inside an object of type <classname>boost::dynamic_bitset</classname> can be changed at any time. The member function <methodname>push_back</methodname><indexterm><primary>dynamic_bitset::push_back</primary></indexterm><indexterm><primary>push_back, dynamic_bitset</primary></indexterm> adds another bit, which will become the most significant bit. Calling <methodname>push_back</methodname> in <xref linkend="ex.dynamicbitset_01" xrefstyle="enp"/> causes <varname>db</varname> to contain 4 bits, of which the two most significant bits are set. Therefore, <varname>db</varname> stores the number 12.</para>
  <para>You can decrease the number of bits by calling the member function <methodname>resize</methodname><indexterm><primary>dynamic_bitset::resize</primary></indexterm><indexterm><primary>resize, dynamic_bitset</primary></indexterm>. Depending on the parameter passed to <methodname>resize</methodname>, bits will either be added or removed.</para>
  <para><classname>boost::dynamic_bitset</classname> provides member functions to query data and access individual bits. The member functions <methodname>size</methodname><indexterm><primary>dynamic_bitset::size</primary></indexterm><indexterm><primary>size, dynamic_bitset</primary></indexterm> and <methodname>count</methodname><indexterm><primary>dynamic_bitset::count</primary></indexterm><indexterm><primary>count, dynamic_bitset</primary></indexterm> return the number of bits and the number of bits currently set, respectively. <methodname>any</methodname><indexterm><primary>dynamic_bitset::any</primary></indexterm><indexterm><primary>any, dynamic_bitset</primary></indexterm> returns <literal>true</literal> if at least one bit is set, and <methodname>none</methodname><indexterm><primary>dynamic_bitset::none</primary></indexterm><indexterm><primary>none, dynamic_bitset</primary></indexterm> returns <literal>true</literal> if no bit is set.</para>
  <para>To access individual bits, use array syntax. A reference to an internal class is returned that represents the corresponding bit and provides member functions to manipulate it. For example, the member function <methodname>flip</methodname><indexterm><primary>dynamic_bitset::reference::flip</primary></indexterm><indexterm><primary>flip, dynamic_bitset::reference</primary></indexterm> toggles the bit. Bitwise operators such as <methodname role="operator">operator~</methodname> are available as well. Overall, the class <classname>boost::dynamic_bitset</classname> offers the same bit manipulation functionality as <classname>std::bitset</classname>.</para>
  <para>Like <classname>std::bitset</classname>, <classname>boost::dynamic_bitset</classname> does not support iterators.</para>
</chapter>
