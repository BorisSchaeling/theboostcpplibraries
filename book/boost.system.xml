<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="5.0" xml:lang="en" xml:id="boost.system">
  <title>Boost.System</title><indexterm><primary>Boost.System</primary></indexterm>
  <para><link xlink:href="http://www.boost.org/libs/system">Boost.System</link> is a library that, in essence, defines four classes to identify errors. All four classes were added to the standard library with C++11. If your development environment supports C++11, you don’t need to use Boost.System. However, since many Boost libraries use Boost.System, you might encounter Boost.System through those other libraries.</para>
  <para><classname>boost::system::error_code</classname><indexterm><primary>system::error_code</primary></indexterm><indexterm><primary>error_code, system</primary></indexterm> is the most basic class in Boost.System; it represents operating system-specific errors. Because operating systems typically enumerate errors, <classname>boost::system::error_code</classname> saves an error code in a variable of type <type>int</type>. <xref linkend="ex.system_01" xrefstyle="enp"/> illustrates how to use this class.</para>
  <example xml:id="ex.system_01">
    <title>Using <classname>boost::system::error_code</classname></title>
    <programlisting><xi:include href="../src/system_01/main.cpp" parse="text"/></programlisting>
  </example>
  <para><xref linkend="ex.system_01" xrefstyle="enp" /> defines the function <function>fail</function>, which is used to return an error. In order for the caller to detect whether <function>fail</function> failed, an object of type <classname>boost::system::error_code</classname> is passed by reference. Many functions that are provided by Boost libraries use <classname>boost::system::error_code</classname> like this. For example, Boost.Asio provides the function <function>boost::asio::ip::host_name</function>, to which you can pass an object of type <classname>boost::system::error_code</classname>.</para>
  <para>Boost.System defines numerous error codes in the namespace <package>boost::system::errc</package>. <xref linkend="ex.system_01" xrefstyle="enp" /> assigns the error code <code>boost::system::errc::not_supported</code> to <varname>ec</varname>. Because <varname>boost::system::errc::not_supported</varname> is a number and <varname>ec</varname> is an object of type <classname>boost::system::error_code</classname>, the function <function>boost::system::errc::make_error_code</function><indexterm><primary>system::errc::make_error_code</primary></indexterm><indexterm><primary>make_error_code, system::errc</primary></indexterm> is called. This function creates an object of type <classname>boost::system::error_code</classname> with the respective error code.</para>
  <para>In <function>main</function>, <methodname>value</methodname><indexterm><primary>system::error_code::value</primary></indexterm><indexterm><primary>value, system::error_code</primary></indexterm> is called on <varname>ec</varname>. This member function returns the error code stored in the object.</para>
  <para>By default, 0 means no error. Every other number refers to an error. Error code values are operating system dependent. Refer to the documentation for your operating system for a description of error codes.</para>
  <para>In addition to <methodname>value</methodname>, <classname>boost::system::error_code</classname> provides the member function <methodname>category</methodname><indexterm><primary>system::error_code::category</primary></indexterm><indexterm><primary>category, system::error_code</primary></indexterm>, which returns an object of type <classname>boost::system::error_category</classname><indexterm><primary>system::error_category</primary></indexterm><indexterm><primary>error_category, system</primary></indexterm>.</para>
  <para>Error codes are simply numeric values. While operating system manufacturers such as Microsoft are able to guarantee the uniqueness of system error codes, keeping error codes unique across all existing applications is virtually impossible for application developers. It would require a central database filled with error codes from all software developers around the world to avoid reusing the same codes for different errors. Because this is impractical, error categories exist.</para>
  <para>Error codes of type <classname>boost::system::error_code</classname> belong to a category that can be retrieved with the member function <methodname>category</methodname>. Errors created with <function>boost::system::errc::make_error_code</function> automatically belong to the generic category. This is the category errors belong to if they aren’t assigned to another category explicitly.</para>
  <example xml:id="ex.system_02">
    <title>Using <classname>boost::system::error_category</classname></title>
    <programlisting><xi:include href="../src/system_02/main.cpp" parse="text"/></programlisting>
  </example>
  <para>As shown in <xref linkend="ex.system_02" xrefstyle="enp" />, <methodname>category</methodname> returns an error’s category. This is an object of type <classname>boost::system::error_category</classname>. There are only a few member functions. For example, <methodname>name</methodname><indexterm><primary>system::error_category::name</primary></indexterm><indexterm><primary>name, system::error_category</primary></indexterm> retrieves the name of the category. <xref linkend="ex.system_02" xrefstyle="enp"/> writes <computeroutput>generic</computeroutput> to standard output.</para>
  <para>You can also use the free-standing function <function>boost::system::generic_category</function><indexterm><primary>system::generic_category</primary></indexterm><indexterm><primary>generic_category, system</primary></indexterm> to access the generic category.</para>
  <para>Boost.System provides a second category. If you call the free-standing function <function>boost::system::system_category</function><indexterm><primary>system::system_category</primary></indexterm><indexterm><primary>system_category, system</primary></indexterm>, you get a reference to the system category. If you write the category’s name to standard output, <computeroutput>system</computeroutput> is displayed.</para>
  <para>Errors are uniquely identified by the error code and the error category. Because error codes are only required to be unique within a category, you should create a new category whenever you want to define error codes specific to your program. This makes it possible to use error codes that do not interfere with error codes from other developers.</para>
  <example xml:id="ex.system_03">
    <title>Creating error categories</title>
    <programlisting><xi:include href="../src/system_03/main.cpp" parse="text"/></programlisting>
   </example>
  <para>A new error category is defined by creating a class derived from <classname>boost::system::error_category</classname>. This requires you to define various member functions. At a minimum, the member functions <methodname>name</methodname> and <methodname>message</methodname><indexterm><primary>system::error_category::message</primary></indexterm><indexterm><primary>message, system::error_category</primary></indexterm> must be supplied because they are defined as pure virtual member functions in <classname>boost::system::error_category</classname>. For additional member functions, the default behavior can be overridden if required.</para>
  <para>While <methodname>name</methodname> returns the name of the error category, <methodname>message</methodname> is used to retrieve the error description for a particular error code. Unlike <xref linkend="ex.system_03" xrefstyle="enp"/>, the parameter <varname>ev</varname> is usually evaluated to return a description based on the error code.</para>
  <para>An object of the type of the newly created error category can be used to initialize an error code. <xref linkend="ex.system_03" xrefstyle="enp"/> defines the error code <varname>ec</varname> using the new category <classname>application_category</classname>. Therefore, error code 129 is no longer a generic error; instead, its meaning is defined by the developer of the new error category.</para>
  <note>
    <para>To compile <xref linkend="ex.system_03" xrefstyle="enp" /> with Visual C++ 2013, remove the keyword <code>noexcept</code>. This version of the Microsoft compiler doesn’t support <code>noexcept</code>.</para>
  </note>
  <para><classname>boost::system::error_code</classname> provides a member function called <methodname>default_error_condition</methodname>,<indexterm><primary>system::error_code::default_error_condition</primary></indexterm><indexterm><primary>default_error_condition, system::error_code</primary></indexterm> that returns an object of type <classname>boost::system::error_condition</classname><indexterm><primary>system::error_condition</primary></indexterm><indexterm><primary>error_condition, system</primary></indexterm>. The interface of <classname>boost::system::error_condition</classname> is almost identical to the interface of <classname>boost::system::error_code</classname>. The only difference is the member function <methodname>default_error_condition</methodname>, which is only provided by <classname>boost::system::error_code</classname>.</para>
  <example xml:id="ex.system_04">
    <title>Using <classname>boost::system::error_condition</classname></title>
    <programlisting><xi:include href="../src/system_04/main.cpp" parse="text"/></programlisting>
  </example>
  <para><classname>boost::system::error_condition</classname> is used just like <classname>boost::system::error_code</classname>. That’s why it’s possible, as shown in <xref linkend="ex.system_04" xrefstyle="enp" />, to call the member functions <methodname>value</methodname><indexterm><primary>system::error_condition::value</primary></indexterm><indexterm><primary>value, system::error_condition</primary></indexterm> and <methodname>category</methodname><indexterm><primary>system::error_condition::category</primary></indexterm><indexterm><primary>category, system::error_condition</primary></indexterm> for an object of type <classname>boost::system::error_condition</classname>.</para>
  <para>While the class <classname>boost::system::error_code</classname> is used for platform-dependent error codes, <classname>boost::system::error_condition</classname> is used to access platform-independent error codes. The member function <methodname>default_error_condition</methodname> translates a platform-dependent error code into a platform-independent error code of type <classname>boost::system::error_condition</classname>.</para>
  <para>You can use <classname>boost::system::error_condition</classname> to identify errors that are platform independent. Such an error could be, for example, a failed access to a non-existing file. While operating systems may provide different interfaces to access files and may return different error codes, trying to access a non-existing file is an error on all operating systems. The error code returned from operating system specific interfaces is stored in <classname>boost::system::error_code</classname>. The error code that describes the failed access to a non-existing file is stored in <classname>boost::system::error_condition</classname>.</para>
  <para>The last class provided by Boost.System is <exceptionname>boost::system::system_error</exceptionname><indexterm><primary>system::system_error</primary></indexterm><indexterm><primary>system_error, system</primary></indexterm>, which is derived from <exceptionname>std::runtime_error</exceptionname>. It can be used to transport an error code of type <classname>boost::system::error_code</classname> in an exception.</para>
  <example xml:id="ex.system_05">
    <title>Using <exceptionname>boost::system::system_error</exceptionname></title>
    <programlisting><xi:include href="../src/system_05/main.cpp" parse="text"/></programlisting>
  </example>
  <para>In <xref linkend="ex.system_05" xrefstyle="enp" />, the free-standing function <function>fail</function> has been changed to throw an exception of type <exceptionname>boost::system::system_error</exceptionname> in case of an error. This exception can transport an error code of type <classname>boost::system::error_code</classname>. The exception is caught in <function>main</function>, which writes the error code and the error category to standard error. There is a second variant of the function <function>boost::asio::ip::host_name</function> that works just like this.</para>
</chapter>
