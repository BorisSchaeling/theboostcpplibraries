<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="5.0" xml:lang="en" xml:id="boost.operators">
  <title>Boost.Operators</title><indexterm><primary>Boost.Operators</primary></indexterm>
  <para><link xlink:href="http://www.boost.org/libs/utility/operators.htm">Boost.Operators</link> provides numerous classes to automatically overload operators. In <xref linkend="ex.operators_01" xrefstyle="enp"/>, a greater-than operator is automatically added, even though there is no declaration, because the greater-than operator can be implemented using the already defined less-than operator.</para>
  <example xml:id="ex.operators_01">
    <title>Greater-than operator with <classname>boost::less_than_comparable</classname></title>
    <programlisting><xi:include href="../src/operators_01/main.cpp" parse="text"/></programlisting>
  </example>
  <para>To automatically add operators, derive a class from classes defined by Boost.Operators in <filename class="headerfile">boost/operators.hpp</filename>. If a class is derived from <classname>boost::less_than_comparable</classname><indexterm><primary>less_than_comparable, Boost.Operators</primary></indexterm>, then <methodname role="operator">operator&gt;</methodname>, <methodname role="operator">operator&lt;=</methodname>, and <methodname role="operator">operator&gt;=</methodname> are automatically defined.</para>
  <para>Because many operators can be expressed in terms of other operators, automatic overloading is possible. For example, <classname>boost::less_than_comparable</classname> implements the greater-than operator as the opposite of the less-than operator; if an object isn’t less than another, it must be greater, assuming they aren’t equal.</para>
  <para>If two objects can be equal, use <classname>boost::partially_ordered</classname><indexterm><primary>partially_ordered, Boost.Operators</primary></indexterm> as the base class. By defining <methodname role="operator">operator==</methodname>, <classname>boost::partially_ordered</classname> can determine whether less than really means greater than or equal.</para>
  <para>In addition to <classname>boost::less_than_comparable</classname> and <classname>boost::partially_ordered</classname>, classes are provided that allow you to overload arithmetic and logical operators. Classes are also available to overload operators usually provided by iterators, pointers, or arrays. Because automatic overloading is only possible once other operators have been defined, the particular operators that must be provided will vary depending on the situation. Consult the documentation for more information.</para>
</chapter>
