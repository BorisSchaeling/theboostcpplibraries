<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="5.0" xml:lang="en" xml:id="boost.chrono">
  <title>Boost.Chrono</title><indexterm><primary>Boost.Chrono</primary></indexterm>
  <para>The library <link xlink:href="http://www.boost.org/libs/chrono">Boost.Chrono</link> provides a variety of clocks. For example, you can get the current time or you can measure the time passed in a process.</para>
  <para>Parts of Boost.Chrono were added to C++11. If your development environment supports C++11, you have access to several clocks defined in the header file <filename class="headerfile">chrono</filename>. However, C++11 doesn’t support some features, for example clocks to measure CPU time. Furthermore, only Boost.Chrono supports user-defined output formats for time.</para>
  <para>You have access to all Boost.Chrono clocks through the header file <filename class="headerfile">boost/chrono.hpp</filename>. The only extension is user-defined formatting, which requires the header file <filename class="headerfile">boost/chrono_io.hpp</filename>.</para>
  <example xml:id="ex.chrono_01">
    <title>All clocks from Boost.Chrono</title>
    <programlisting><xi:include href="../src/chrono_01/main.cpp" parse="text"/></programlisting>
  </example>
  <para><xref linkend="ex.chrono_01" xrefstyle="enp"/> introduces all of the clocks provided by Boost.Chrono. All clocks have in common the member function <methodname>now</methodname>, which returns a timepoint. All timepoints are relative to a universally valid timepoint. This reference timepoint is called <emphasis role="concept">epoch</emphasis><indexterm><primary>epoch, Boost.Chrono</primary></indexterm>. An often used epoch is 1 January 1970. <xref linkend="ex.chrono_01" xrefstyle="enp"/> writes the epoch for every timepoint displayed.</para>
  <para>Boost.Chrono includes the following clocks:</para>
  <itemizedlist>
    <listitem>
      <para><classname>boost::chrono::system_clock</classname><indexterm><primary>chrono::system_clock</primary></indexterm><indexterm><primary>system_clock, chrono</primary></indexterm> returns the system time. This is the time usually displayed on the desktop of your computer. If you change the time on your computer, <classname>boost::chrono::system_clock</classname> returns the new time. <xref linkend="ex.chrono_01" xrefstyle="enp"/> writes a string to standard output that looks like the following: <computeroutput>13919594042183544 [1/10000000]seconds since Jan 1, 1970</computeroutput>.</para>
      <para>The epoch isn’t standardized for <classname>boost::chrono::system_clock</classname>. The epoch 1 January 1970, which is used in these examples, is implementation dependent. However, if you specifically want to get the time since 1 January 1970, call <methodname>to_time_t</methodname><indexterm><primary>chrono::system_clock::to_time_t</primary></indexterm><indexterm><primary>to_time_t, chrono::system_clock</primary></indexterm>. <methodname>to_time_t</methodname> is a static member function that returns the current system time as the number of seconds since 1 January 1970 as a <type>std::time_t</type>.</para>
    </listitem>
    <listitem>
      <para><classname>boost::chrono::steady_clock</classname><indexterm><primary>chrono::steady_clock</primary></indexterm><indexterm><primary>steady_clock, chrono</primary></indexterm> is a clock that will always return a later time when it is accessed later. Even if the time is set back on a computer, <classname>boost::chrono::steady_clock</classname> will return a later time. This time is known as <emphasis role="concept">monotonic time</emphasis><indexterm><primary>monotonic time, Boost.Chrono</primary></indexterm>.</para>
      <para><xref linkend="ex.chrono_01" xrefstyle="enp" /> displays the number of nanoseconds since the system was booted. The message looks like the following: <computeroutput>10594369282958 nanoseconds since boot</computeroutput>. <classname>boost::chrono::steady_clock</classname> measures the time elapsed since the last boot. However, starting the measurement since the last boot is an implementation detail. The reference point could change with a different implementation.</para>
      <para><classname>boost::chrono::steady_clock</classname> isn’t supported on all platforms. The clock is only available if the macro <code>BOOST_CHRONO_HAS_CLOCK_STEADY</code><indexterm><primary>BOOST_CHRONO_HAS_CLOCK_STEADY, Boost.Chrono</primary></indexterm> is defined.</para>
    </listitem>
    <listitem>
      <para><classname>boost::chrono::high_resolution_clock</classname><indexterm><primary>chrono::high_resolution_clock</primary></indexterm><indexterm><primary>high_resolution_clock, chrono</primary></indexterm> is a type definition for <classname>boost::chrono::system_clock</classname> or <classname>boost::chrono::steady_clock</classname>, depending on which clock measures time more precisely. Thus, the output is identical to the output of the clock <classname>boost::chrono::high_resolution_clock</classname> is based on.</para>
    </listitem>
    <listitem>
      <para><classname>boost::chrono::process_real_cpu_clock</classname><indexterm><primary>chrono::process_real_cpu_clock</primary></indexterm><indexterm><primary>process_real_cpu_clock, chrono</primary></indexterm> returns the CPU time a process has been running. The clock measures the time since program start. <xref linkend="ex.chrono_01" xrefstyle="enp"/> writes a string to standard output that looks like the following: <computeroutput>1000000 nanoseconds since process start-up</computeroutput>.</para>
      <para>You could also get this time using <function>std::clock</function> from <filename class="headerfile">ctime</filename>. In fact, the current implementation of <classname>boost::chrono::process_real_cpu_clock</classname> is based on <function>std::clock</function>.</para>
      <para>The <classname>boost::chrono::process_real_cpu_clock</classname> clock and other clocks measuring CPU time can only be used if the macro <code>BOOST_CHRONO_HAS_PROCESS_CLOCKS</code><indexterm><primary>BOOST_CHRONO_HAS_PROCESS_CLOCKS, Boost.Chrono</primary></indexterm> is defined.</para>
    </listitem>
    <listitem>
      <para><classname>boost::chrono::process_user_cpu_clock</classname><indexterm><primary>chrono::process_user_cpu_clock</primary></indexterm><indexterm><primary>process_user_cpu_clock, chrono</primary></indexterm> returns the CPU time a process spent in <emphasis role="concept">user space</emphasis><indexterm><primary>user space, Boost.Chrono</primary></indexterm>. User space refers to code that runs separately from operating system functions. The time it takes to execute code in operating system functions called by a program is not counted as user space time.</para>
      <para><classname>boost::chrono::process_user_cpu_clock</classname> returns only the time spent running in user space. If a program is halted for a while, for example through the Windows <function>Sleep</function> function, the time spent in <function>Sleep</function> isn’t measured by <classname>boost::chrono::process_user_cpu_clock</classname>.</para>
      <para><xref linkend="ex.chrono_01" xrefstyle="enp"/> writes a string to standard output that looks like the following: <computeroutput>15600100 nanoseconds since process start-up</computeroutput>.</para>
    </listitem>
    <listitem>
      <para><classname>boost::chrono::process_system_cpu_clock</classname><indexterm><primary>chrono::process_system_cpu_clock</primary></indexterm><indexterm><primary>process_system_cpu_clock, chrono</primary></indexterm> is similar to <classname>boost::chrono::process_user_cpu_clock</classname>. However, this clock measures the time spent in <emphasis role="concept">kernel space</emphasis><indexterm><primary>kernel space, Boost.Chrono</primary></indexterm>. <classname>boost::chrono::process_system_cpu_clock</classname> returns the CPU time a process spends executing operating system functions.</para>
      <para><xref linkend="ex.chrono_01" xrefstyle="enp"/> writes a string to the standard output that looks like the following: <computeroutput>0 nanoseconds since process start-up</computeroutput>. Because this example doesn’t call operating system functions directly and because Boost.Chrono uses only a few operating system functions, <classname>boost::chrono::process_system_cpu_clock</classname> may return 0.</para>
    </listitem>
    <listitem>
      <para><classname>boost::chrono::process_cpu_clock</classname><indexterm><primary>chrono::process_cpu_clock</primary></indexterm><indexterm><primary>process_cpu_clock, chrono</primary></indexterm> returns a tuple with the CPU times which are returned by <classname>boost::chrono::process_real_cpu_clock</classname>, <classname>boost::chrono::process_user_cpu_clock</classname> and <classname>boost::chrono::process_system_cpu_clock</classname>. <xref linkend="ex.chrono_01" xrefstyle="enp"/> writes a string to standard output that looks like the following: <computeroutput>{1000000;15600100;0} nanoseconds since process start-up</computeroutput>.</para>
    </listitem>
    <listitem>
      <para><classname>boost::chrono::thread_clock</classname><indexterm><primary>chrono::thread_clock</primary></indexterm><indexterm><primary>thread_clock, chrono</primary></indexterm> returns the time used by a thread. The time measured by <classname>boost::chrono::thread_clock</classname> is comparable to CPU time, except it is per thread, rather than per process. <classname>boost::chrono::thread_clock</classname> returns the CPU time the thread has been running. It does not distinguish between time spent in user and kernel space.</para>
      <para><classname>boost::chrono::thread_clock</classname> isn’t supported on all platforms. You can only use <classname>boost::chrono::thread_clock</classname> if the macro <code>BOOST_CHRONO_HAS_THREAD_CLOCK</code><indexterm><primary>BOOST_CHRONO_HAS_THREAD_CLOCK, Boost.Chrono</primary></indexterm> is defined.</para>
      <para>Boost.Chrono provides the macro, <code>BOOST_CHRONO_THREAD_CLOCK_IS_STEADY</code><indexterm><primary>BOOST_CHRONO_THREAD_CLOCK_IS_STEADY, Boost.Chrono</primary></indexterm>, to detect whether <classname>boost::chrono::thread_clock</classname> measures monotonic time like <classname>boost::chrono::steady_clock</classname>.</para>
      <para><xref linkend="ex.chrono_01" xrefstyle="enp"/> writes a string to standard output that looks like the following: <computeroutput>15600100 nanoseconds since thread start-up</computeroutput>.</para>
    </listitem>
  </itemizedlist>
  <para>All of the clocks in Boost.Chrono depend on operating system functions; thus, the operating system determines how precise and reliable the returned times are.</para>
  <example xml:id="ex.chrono_02">
    <title>Adding and subtracting durations using Boost.Chrono</title>
    <programlisting><xi:include href="../src/chrono_02/main.cpp" parse="text"/></programlisting>
  </example>
  <para><methodname>now</methodname> returns an object of type <classname>boost::chrono::time_point</classname><indexterm><primary>chrono::time_point</primary></indexterm><indexterm><primary>time_point, chrono</primary></indexterm> for all clocks. This type is tightly coupled with a clock because the timepoint is measured relative to a reference timepoint that is defined by a clock. <classname>boost::chrono::time_point</classname> is a template that expects the type of a clock as a parameter. Each clock type provides a type definition for its specialized <classname>boost::chrono::time_point</classname>. For example, the type definition for <classname>process_real_cpu_clock</classname> is <type>process_real_cpu_clock::time_point</type>.</para>
  <para>Boost.Chrono also provides the class <classname>boost::chrono::duration</classname>,<indexterm><primary>chrono::duration</primary></indexterm><indexterm><primary>duration, chrono</primary></indexterm> which describes durations. Because <classname>boost::chrono::duration</classname> is also a template, Boost.Chrono provides the six classes <classname>boost::chrono::nanoseconds</classname><indexterm><primary>chrono::nanoseconds</primary></indexterm><indexterm><primary>nanoseconds, chrono</primary></indexterm>, <classname>boost::chrono::milliseconds</classname><indexterm><primary>chrono::milliseconds</primary></indexterm><indexterm><primary>milliseconds, chrono</primary></indexterm>, <classname>boost::chrono::microseconds</classname><indexterm><primary>chrono::microseconds</primary></indexterm><indexterm><primary>microseconds, chrono</primary></indexterm>, <classname>boost::chrono::seconds</classname><indexterm><primary>chrono::seconds</primary></indexterm><indexterm><primary>seconds, chrono</primary></indexterm>, <classname>boost::chrono::minutes</classname>,<indexterm><primary>chrono::minutes</primary></indexterm><indexterm><primary>minutes, chrono</primary></indexterm> and <classname>boost::chrono::hours</classname>,<indexterm><primary>chrono::hours</primary></indexterm><indexterm><primary>hours, chrono</primary></indexterm> which are easier to use.</para>
  <para>Boost.Chrono overloads several operators to process timepoints and durations. <xref linkend="ex.chrono_02" xrefstyle="enp"/> subtracts durations from or adds durations to <varname>p</varname> to get new timepoints, which are written to standard output.</para>
  <para><xref linkend="ex.chrono_02" xrefstyle="enp"/> displays all timepoints in nanoseconds. Boost.Chrono automatically uses the smallest unit when timepoints and durations are processed to make sure that results are as precise as possible. If you want to use a timepoint with another unit, you have to cast it.</para>
  <example xml:id="ex.chrono_03">
    <title>Casting timepoints with <function>boost::chrono::time_point_cast</function></title>
    <programlisting><xi:include href="../src/chrono_03/main.cpp" parse="text"/></programlisting>
  </example>
  <para>The <function>boost::chrono::time_point_cast</function><indexterm><primary>chrono::time_point_cast</primary></indexterm><indexterm><primary>time_point_cast, chrono</primary></indexterm> function is used like a cast operator. <xref linkend="ex.chrono_03" xrefstyle="enp" /> uses <function>boost::chrono::time_point_cast</function> to convert a timepoint based on nanoseconds to a timepoint in minutes. You must use <function>boost::chrono::time_point_cast</function> in this case because the timepoint cannot be expressed in a less precise unit (minutes) without potentially losing precision. You don’t require <function>boost::chrono::time_point_cast</function> to convert from less precise to more precise units.</para>
  <para>Boost.Chrono also provides cast operators for durations.</para>
  <example xml:id="ex.chrono_04">
    <title>Casting durations with <function>boost::chrono::duration_cast</function></title>
    <programlisting><xi:include href="../src/chrono_04/main.cpp" parse="text"/></programlisting>
  </example>
  <para><xref linkend="ex.chrono_04" xrefstyle="enp"/> uses the function <function>boost::chrono::duration_cast</function><indexterm><primary>chrono::duration_cast</primary></indexterm><indexterm><primary>duration_cast, chrono</primary></indexterm> to cast a duration from seconds to minutes. This example writes <computeroutput>1 minute</computeroutput> to standard output.</para>
  <example xml:id="ex.chrono_05">
    <title>Rounding durations</title>
    <programlisting><xi:include href="../src/chrono_05/main.cpp" parse="text"/></programlisting>
  </example>
  <para>Boost.Chrono also provides functions to round durations when casting. <function>boost::chrono::round</function><indexterm><primary>chrono::round</primary></indexterm><indexterm><primary>round, chrono</primary></indexterm> rounds up or down, <function>boost::chrono::floor</function><indexterm><primary>chrono::floor</primary></indexterm><indexterm><primary>floor, chrono</primary></indexterm> rounds down, and <function>boost::chrono::ceil</function><indexterm><primary>chrono::ceil</primary></indexterm><indexterm><primary>ceil, chrono</primary></indexterm> rounds up. <function>boost::chrono::floor</function> uses <function>boost::chrono::duration_cast</function> &#x2013; there is no difference between these two functions.</para>
  <para><xref linkend="ex.chrono_05" xrefstyle="enp"/> writes <computeroutput>1 minute</computeroutput>, <computeroutput>1 minute</computeroutput>, and <computeroutput>2 minutes</computeroutput> to standard output.</para>
  <example xml:id="ex.chrono_06">
    <title>Stream manipulators for user-defined output</title>
    <programlisting><xi:include href="../src/chrono_06/main.cpp" parse="text"/></programlisting>
  </example>
  <para>Boost.Chrono provides various stream manipulators to format the output of timepoints and durations. For example, with the manipulator <function>boost::chrono::symbol_format</function><indexterm><primary>chrono::symbol_format</primary></indexterm><indexterm><primary>symbol_format, chrono</primary></indexterm>, the time unit is written as a symbol instead of a name. Thus, <xref linkend="ex.chrono_06" xrefstyle="enp" /> displays <computeroutput>10 min</computeroutput>.</para>
  <para>The manipulator <function>boost::chrono::time_fmt</function><indexterm><primary>chrono::time_fmt</primary></indexterm><indexterm><primary>time_fmt, chrono</primary></indexterm> can be used to set a timezone and a format string. The timezone must be set to <code>boost::chrono::timezone::local</code><indexterm><primary>chrono::timezone::local</primary></indexterm><indexterm><primary>local, chrono::timezone</primary></indexterm> or <code>boost::chrono::timezone::utc</code><indexterm><primary>chrono::timezone::utc</primary></indexterm><indexterm><primary>utc, chrono::timezone</primary></indexterm>. The format string can use flags to refer to various components of a timepoint. For example, <xref linkend="ex.chrono_06" xrefstyle="enp"/> writes a string to the standard output that looks like the following: <computeroutput>15:46:44</computeroutput>.</para>
  <para>Beside stream manipulators, Boost.Chrono provides facets for many different customizations. For example, there is a facet that makes it possible to output timepoints in another language.</para>
  <note>
    <para>There are two versions of the input/output functions since Boost 1.52.0. Since Boost 1.55.0, the newer version is used by default. If you use a version older than 1.55.0, you must define the macro <code>BOOST_CHRONO_VERSION</code><indexterm><primary>BOOST_CHRONO_VERSION, Boost.Chrono</primary></indexterm> and set it to 2 for <xref linkend="ex.chrono_06" xrefstyle="enp"/> to work.</para>
  </note>
</chapter>
